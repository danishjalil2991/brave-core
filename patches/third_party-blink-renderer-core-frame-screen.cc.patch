diff --git a/third_party/blink/renderer/core/frame/screen.cc b/third_party/blink/renderer/core/frame/screen.cc
index f31ab99b2c40a8b84e8edfd019c410dac9a1360f..9fffc73e5dae879fcc6ea5abe1dd044693d24801 100644
--- a/third_party/blink/renderer/core/frame/screen.cc
+++ b/third_party/blink/renderer/core/frame/screen.cc
@@ -36,6 +36,11 @@
 #include "third_party/blink/renderer/core/page/page.h"
 #include "third_party/blink/renderer/core/probe/core_probes.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#endif
+
 namespace blink {
 
 namespace {
@@ -53,6 +58,32 @@ int Screen::height() const {
     return 0;
   }
   Page* page = frame->GetPage();
+
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    int result;
+    if (page->GetSettings().GetReportScreenSizeInPhysicalPixelsQuirk()) {
+      WebScreenInfo screen_info = page->GetChromeClient().GetScreenInfo(*frame);
+      result = static_cast<int>(
+        lroundf(screen_info.rect.height * screen_info.device_scale_factor));
+    } else {
+      result = page->GetChromeClient().GetScreenInfo(*frame).rect.height;
+    }
+
+    brave_page_graph::PageGraph* page_graph =
+      GetFrame()->GetDocument()->GetPageGraph();
+    if (page_graph != nullptr) {
+      page_graph->RegisterWebAPICall("Screen.height",
+        std::vector<const String>());
+
+      const String page_graph_result(std::to_string(result).c_str());
+      page_graph->RegisterWebAPIResult("Screen.height", page_graph_result);
+    }
+
+    return result;
+  }
+#endif
+
   if (page->GetSettings().GetReportScreenSizeInPhysicalPixelsQuirk()) {
     WebScreenInfo screen_info = GetScreenInfo(*frame);
     return static_cast<int>(
@@ -66,6 +97,32 @@ int Screen::width() const {
     return 0;
   }
   Page* page = frame->GetPage();
+
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    int result;
+    if (page->GetSettings().GetReportScreenSizeInPhysicalPixelsQuirk()) {
+      WebScreenInfo screen_info = page->GetChromeClient().GetScreenInfo(*frame);
+      result = static_cast<int>(
+        lroundf(screen_info.rect.width * screen_info.device_scale_factor));
+    } else {
+      result = page->GetChromeClient().GetScreenInfo(*frame).rect.width;
+    }
+
+    brave_page_graph::PageGraph* page_graph =
+      GetFrame()->GetDocument()->GetPageGraph();
+    if (page_graph != nullptr) {
+      page_graph->RegisterWebAPICall("Screen.width",
+        std::vector<const String>());
+
+      const String page_graph_result(std::to_string(result).c_str());
+      page_graph->RegisterWebAPIResult("Screen.width", page_graph_result);
+    }
+
+    return result;
+  }
+#endif
+
   if (page->GetSettings().GetReportScreenSizeInPhysicalPixelsQuirk()) {
     WebScreenInfo screen_info = GetScreenInfo(*frame);
     return static_cast<int>(
@@ -87,6 +142,26 @@ unsigned Screen::colorDepth() const {
       return display_->color_depth;
     return 0;
   }
+
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    int result = static_cast<unsigned>(
+      GetFrame()->GetPage()->GetChromeClient().GetScreenInfo(*frame).depth);
+
+    brave_page_graph::PageGraph* page_graph =
+      GetFrame()->GetDocument()->GetPageGraph();
+    if (page_graph != nullptr) {
+      page_graph->RegisterWebAPICall("Screen.colorDepth",
+        std::vector<const String>());
+
+      const String page_graph_result(std::to_string(result).c_str());
+      page_graph->RegisterWebAPIResult("Screen.colorDepth", page_graph_result);
+    }
+
+    return result;
+  }
+#endif
+
   return static_cast<unsigned>(GetScreenInfo(*frame).depth);
 }
 
@@ -111,6 +175,26 @@ unsigned Screen::pixelDepth() const {
       return display_->color_depth;
     return 0;
   }
+
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    int result = static_cast<unsigned>(
+      GetFrame()->GetPage()->GetChromeClient().GetScreenInfo(*frame).depth);
+
+    brave_page_graph::PageGraph* page_graph =
+      GetFrame()->GetDocument()->GetPageGraph();
+    if (page_graph != nullptr) {
+      page_graph->RegisterWebAPICall("Screen.pixelDepth",
+        std::vector<const String>());
+
+      const String page_graph_result(std::to_string(result).c_str());
+      page_graph->RegisterWebAPIResult("Screen.pixelDepth", page_graph_result);
+    }
+
+    return result;
+  }
+#endif
+
   return static_cast<unsigned>(GetScreenInfo(*frame).depth);
 }
 
@@ -108,6 +210,33 @@ int Screen::availLeft() const {
     return 0;
   }
   Page* page = frame->GetPage();
+
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    int result;
+    if (page->GetSettings().GetReportScreenSizeInPhysicalPixelsQuirk()) {
+      WebScreenInfo screen_info = page->GetChromeClient().GetScreenInfo(*frame);
+      result = static_cast<int>(lroundf(screen_info.available_rect.x *
+                                        screen_info.device_scale_factor));
+    } else {
+      result = static_cast<int>(
+        page->GetChromeClient().GetScreenInfo(*frame).available_rect.x);
+    }
+
+    brave_page_graph::PageGraph* page_graph =
+      GetFrame()->GetDocument()->GetPageGraph();
+    if (page_graph != nullptr) {
+      page_graph->RegisterWebAPICall("Screen.availLeft",
+        std::vector<const String>());
+
+      const String page_graph_result(std::to_string(result).c_str());
+      page_graph->RegisterWebAPIResult("Screen.availLeft", page_graph_result);
+    }
+
+    return result;
+  }
+#endif
+
   if (page->GetSettings().GetReportScreenSizeInPhysicalPixelsQuirk()) {
     WebScreenInfo screen_info = GetScreenInfo(*frame);
     return static_cast<int>(lroundf(screen_info.available_rect.x *
@@ -124,6 +250,33 @@ int Screen::availTop() const {
     return 0;
   }
   Page* page = frame->GetPage();
+
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    int result;
+    if (page->GetSettings().GetReportScreenSizeInPhysicalPixelsQuirk()) {
+      WebScreenInfo screen_info = page->GetChromeClient().GetScreenInfo(*frame);
+      result = static_cast<int>(lroundf(screen_info.available_rect.y *
+                                        screen_info.device_scale_factor));
+    } else {
+      result = static_cast<int>(
+        page->GetChromeClient().GetScreenInfo(*frame).available_rect.y);
+    }
+
+    brave_page_graph::PageGraph* page_graph =
+      GetFrame()->GetDocument()->GetPageGraph();
+    if (page_graph != nullptr) {
+      page_graph->RegisterWebAPICall("Screen.availTop",
+        std::vector<const String>());
+
+      const String page_graph_result(std::to_string(result).c_str());
+      page_graph->RegisterWebAPIResult("Screen.availTop", page_graph_result);
+    }
+
+    return result;
+  }
+#endif
+
   if (page->GetSettings().GetReportScreenSizeInPhysicalPixelsQuirk()) {
     WebScreenInfo screen_info = GetScreenInfo(*frame);
     return static_cast<int>(lroundf(screen_info.available_rect.y *
@@ -140,6 +290,33 @@ int Screen::availHeight() const {
     return 0;
   }
   Page* page = frame->GetPage();
+
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    int result;
+    if (page->GetSettings().GetReportScreenSizeInPhysicalPixelsQuirk()) {
+      WebScreenInfo screen_info = page->GetChromeClient().GetScreenInfo(*frame);
+      result = static_cast<int>(lroundf(screen_info.available_rect.height *
+                                        screen_info.device_scale_factor));
+    } else {
+      result = page->GetChromeClient().GetScreenInfo(*frame).available_rect.height;
+    }
+
+    brave_page_graph::PageGraph* page_graph =
+      GetFrame()->GetDocument()->GetPageGraph();
+    if (page_graph != nullptr) {
+      page_graph->RegisterWebAPICall("Screen.availHeight",
+        std::vector<const String>());
+
+      const String page_graph_result(std::to_string(result).c_str());
+      page_graph->RegisterWebAPIResult("Screen.availHeight",
+        page_graph_result);
+    }
+
+    return result;
+  }
+#endif
+
   if (page->GetSettings().GetReportScreenSizeInPhysicalPixelsQuirk()) {
     WebScreenInfo screen_info = GetScreenInfo(*frame);
     return static_cast<int>(lroundf(screen_info.available_rect.height *
@@ -156,6 +330,32 @@ int Screen::availWidth() const {
     return 0;
   }
   Page* page = frame->GetPage();
+
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    int result;
+    if (page->GetSettings().GetReportScreenSizeInPhysicalPixelsQuirk()) {
+      WebScreenInfo screen_info = page->GetChromeClient().GetScreenInfo(*frame);
+      result = static_cast<int>(lroundf(screen_info.available_rect.width *
+                                        screen_info.device_scale_factor));
+    } else {
+      result = page->GetChromeClient().GetScreenInfo(*frame).available_rect.width;
+    }
+
+    brave_page_graph::PageGraph* page_graph =
+      GetFrame()->GetDocument()->GetPageGraph();
+    if (page_graph != nullptr) {
+      page_graph->RegisterWebAPICall("Screen.availWidth",
+        std::vector<const String>());
+
+      const String page_graph_result(std::to_string(result).c_str());
+      page_graph->RegisterWebAPIResult("Screen.availWidth", page_graph_result);
+    }
+
+    return result;
+  }
+#endif
+
   if (page->GetSettings().GetReportScreenSizeInPhysicalPixelsQuirk()) {
     WebScreenInfo screen_info = GetScreenInfo(*frame);
     return static_cast<int>(lroundf(screen_info.available_rect.width *
